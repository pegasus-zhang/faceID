// Generated by gencpp from file ros_interface/Gesture.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_GESTURE_H
#define ROS_INTERFACE_MESSAGE_GESTURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/BBox2D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct Gesture_
{
  typedef Gesture_<ContainerAllocator> Type;

  Gesture_()
    : header()
    , id(0)
    , confidence(0.0)
    , gesture_type(0)
    , gesture_box()  {
    }
  Gesture_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , confidence(0.0)
    , gesture_type(0)
    , gesture_box(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _id_type;
  _id_type id;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef int32_t _gesture_type_type;
  _gesture_type_type gesture_type;

   typedef  ::ros_interface::BBox2D_<ContainerAllocator>  _gesture_box_type;
  _gesture_box_type gesture_box;





  typedef boost::shared_ptr< ::ros_interface::Gesture_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Gesture_<ContainerAllocator> const> ConstPtr;

}; // struct Gesture_

typedef ::ros_interface::Gesture_<std::allocator<void> > Gesture;

typedef boost::shared_ptr< ::ros_interface::Gesture > GesturePtr;
typedef boost::shared_ptr< ::ros_interface::Gesture const> GestureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Gesture_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Gesture_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Gesture_<ContainerAllocator1> & lhs, const ::ros_interface::Gesture_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.confidence == rhs.confidence &&
    lhs.gesture_type == rhs.gesture_type &&
    lhs.gesture_box == rhs.gesture_box;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Gesture_<ContainerAllocator1> & lhs, const ::ros_interface::Gesture_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Gesture_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Gesture_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Gesture_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Gesture_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Gesture_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Gesture_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Gesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0281d8a12e33d2fbe20a398379db4076";
  }

  static const char* value(const ::ros_interface::Gesture_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0281d8a12e33d2fbULL;
  static const uint64_t static_value2 = 0xe20a398379db4076ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Gesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Gesture";
  }

  static const char* value(const ::ros_interface::Gesture_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Gesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"uint8   id     # #手势ID\n"
"float32   confidence     # #置信度\n"
"int32   gesture_type     # #手势类型，GESTURE_TYPE=0//未知模式，GESTURE_TYPE=1//来，手指指向下方，GESTURE_TYPE=2//握手，GESTURE_TYPE=3//招手，打招呼\n"
"BBox2D   gesture_box     # # 手势图像框\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/BBox2D\n"
"int16   xmin     # # 图像框左上角的x坐标\n"
"int16   ymin     # # 图像框左上角的y坐标\n"
"int16   xmax     # # 图像框右下角的x坐标\n"
"int16   ymax     # # 图像框右下角的y坐标\n"
;
  }

  static const char* value(const ::ros_interface::Gesture_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Gesture_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.confidence);
      stream.next(m.gesture_type);
      stream.next(m.gesture_box);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gesture_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Gesture_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Gesture_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "gesture_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gesture_type);
    s << indent << "gesture_box: ";
    s << std::endl;
    Printer< ::ros_interface::BBox2D_<ContainerAllocator> >::stream(s, indent + "  ", v.gesture_box);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_GESTURE_H
