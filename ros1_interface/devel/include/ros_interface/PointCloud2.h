// Generated by gencpp from file ros_interface/PointCloud2.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_POINTCLOUD2_H
#define ROS_INTERFACE_MESSAGE_POINTCLOUD2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/PointField.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct PointCloud2_
{
  typedef PointCloud2_<ContainerAllocator> Type;

  PointCloud2_()
    : header()
    , height(0)
    , width(0)
    , fields()
    , is_bigendian(false)
    , point_step(0)
    , row_step(0)
    , data()
    , is_dense(false)  {
    }
  PointCloud2_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , height(0)
    , width(0)
    , fields(_alloc)
    , is_bigendian(false)
    , point_step(0)
    , row_step(0)
    , data(_alloc)
    , is_dense(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _height_type;
  _height_type height;

   typedef uint32_t _width_type;
  _width_type width;

   typedef std::vector< ::ros_interface::PointField_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::PointField_<ContainerAllocator> >> _fields_type;
  _fields_type fields;

   typedef uint8_t _is_bigendian_type;
  _is_bigendian_type is_bigendian;

   typedef uint32_t _point_step_type;
  _point_step_type point_step;

   typedef uint32_t _row_step_type;
  _row_step_type row_step;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _data_type;
  _data_type data;

   typedef uint8_t _is_dense_type;
  _is_dense_type is_dense;





  typedef boost::shared_ptr< ::ros_interface::PointCloud2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::PointCloud2_<ContainerAllocator> const> ConstPtr;

}; // struct PointCloud2_

typedef ::ros_interface::PointCloud2_<std::allocator<void> > PointCloud2;

typedef boost::shared_ptr< ::ros_interface::PointCloud2 > PointCloud2Ptr;
typedef boost::shared_ptr< ::ros_interface::PointCloud2 const> PointCloud2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::PointCloud2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::PointCloud2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::PointCloud2_<ContainerAllocator1> & lhs, const ::ros_interface::PointCloud2_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.height == rhs.height &&
    lhs.width == rhs.width &&
    lhs.fields == rhs.fields &&
    lhs.is_bigendian == rhs.is_bigendian &&
    lhs.point_step == rhs.point_step &&
    lhs.row_step == rhs.row_step &&
    lhs.data == rhs.data &&
    lhs.is_dense == rhs.is_dense;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::PointCloud2_<ContainerAllocator1> & lhs, const ::ros_interface::PointCloud2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PointCloud2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PointCloud2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PointCloud2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PointCloud2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PointCloud2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PointCloud2_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::PointCloud2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4df5a2696573347510f7b13515574cfc";
  }

  static const char* value(const ::ros_interface::PointCloud2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4df5a26965733475ULL;
  static const uint64_t static_value2 = 0x10f7b13515574cfcULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::PointCloud2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/PointCloud2";
  }

  static const char* value(const ::ros_interface::PointCloud2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::PointCloud2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"uint32   height     #  \n"
"uint32   width     #  \n"
"PointField[] fields # # Describes the channels and their layout in the binary data blob.\n"
"bool   is_bigendian     # # Is this data bigendian?\n"
"uint32   point_step     # # Length of a point in bytes\n"
"uint32   row_step     # # Length of a row in bytes\n"
"uint8[] data # # Actual point data, size is (row_step*height)\n"
"bool   is_dense     # # True if there are no invalid points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/PointField\n"
"string   name     # # Name of field\n"
"uint32   offset     # # Offset from start of point struct\n"
"uint8   datatype     # # Datatype enumeration, see above\n"
"uint32   count     # # How many elements in the field\n"
;
  }

  static const char* value(const ::ros_interface::PointCloud2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::PointCloud2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.fields);
      stream.next(m.is_bigendian);
      stream.next(m.point_step);
      stream.next(m.row_step);
      stream.next(m.data);
      stream.next(m.is_dense);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointCloud2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::PointCloud2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::PointCloud2_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "fields[]" << std::endl;
    for (size_t i = 0; i < v.fields.size(); ++i)
    {
      s << indent << "  fields[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::PointField_<ContainerAllocator> >::stream(s, indent + "    ", v.fields[i]);
    }
    s << indent << "is_bigendian: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_bigendian);
    s << indent << "point_step: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.point_step);
    s << indent << "row_step: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.row_step);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "is_dense: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_dense);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_POINTCLOUD2_H
