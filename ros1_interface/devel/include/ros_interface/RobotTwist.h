// Generated by gencpp from file ros_interface/RobotTwist.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_ROBOTTWIST_H
#define ROS_INTERFACE_MESSAGE_ROBOTTWIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_interface/Vector3.h>
#include <ros_interface/Vector3.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct RobotTwist_
{
  typedef RobotTwist_<ContainerAllocator> Type;

  RobotTwist_()
    : linear()
    , angular()
    , action_name()  {
    }
  RobotTwist_(const ContainerAllocator& _alloc)
    : linear(_alloc)
    , angular(_alloc)
    , action_name(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ros_interface::Vector3_<ContainerAllocator>  _linear_type;
  _linear_type linear;

   typedef  ::ros_interface::Vector3_<ContainerAllocator>  _angular_type;
  _angular_type angular;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_name_type;
  _action_name_type action_name;





  typedef boost::shared_ptr< ::ros_interface::RobotTwist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::RobotTwist_<ContainerAllocator> const> ConstPtr;

}; // struct RobotTwist_

typedef ::ros_interface::RobotTwist_<std::allocator<void> > RobotTwist;

typedef boost::shared_ptr< ::ros_interface::RobotTwist > RobotTwistPtr;
typedef boost::shared_ptr< ::ros_interface::RobotTwist const> RobotTwistConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::RobotTwist_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::RobotTwist_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::RobotTwist_<ContainerAllocator1> & lhs, const ::ros_interface::RobotTwist_<ContainerAllocator2> & rhs)
{
  return lhs.linear == rhs.linear &&
    lhs.angular == rhs.angular &&
    lhs.action_name == rhs.action_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::RobotTwist_<ContainerAllocator1> & lhs, const ::ros_interface::RobotTwist_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RobotTwist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::RobotTwist_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RobotTwist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::RobotTwist_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RobotTwist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::RobotTwist_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::RobotTwist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7938edcb0110b16827b9b0f7a4e4695d";
  }

  static const char* value(const ::ros_interface::RobotTwist_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7938edcb0110b168ULL;
  static const uint64_t static_value2 = 0x27b9b0f7a4e4695dULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::RobotTwist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/RobotTwist";
  }

  static const char* value(const ::ros_interface::RobotTwist_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::RobotTwist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Vector3   linear     # 线速度（x方向 y方向 z方向）\n"
"Vector3   angular     # 角速度（x方向 y方向 z方向）\n"
"string   action_name     # #简单指令，坐下，站起来（坐下，站起来指令直接运控执行），包含步态切换，规划只需要发送这个就行了\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Vector3\n"
"float32   x     #  \n"
"float32   y     #  \n"
"float32   z     #  \n"
;
  }

  static const char* value(const ::ros_interface::RobotTwist_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::RobotTwist_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear);
      stream.next(m.angular);
      stream.next(m.action_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotTwist_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::RobotTwist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::RobotTwist_<ContainerAllocator>& v)
  {
    s << indent << "linear: ";
    s << std::endl;
    Printer< ::ros_interface::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear);
    s << indent << "angular: ";
    s << std::endl;
    Printer< ::ros_interface::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular);
    s << indent << "action_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_ROBOTTWIST_H
