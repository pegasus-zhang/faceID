// Generated by gencpp from file ros_interface/Gnss.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_GNSS_H
#define ROS_INTERFACE_MESSAGE_GNSS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>
#include <ros_interface/Point3D.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct Gnss_
{
  typedef Gnss_<ContainerAllocator> Type;

  Gnss_()
    : header()
    , is_valid(false)
    , latitude(0.0)
    , longitude(0.0)
    , elevation(0.0)
    , utm_position()
    , attitude()
    , sd_position()
    , sd_velocity()
    , sd_attitude()
    , second(0.0)
    , sat_use_num(0)
    , sat_in_view_num(0)
    , solution_status(0)
    , position_type(0)
    , linear_velocity()  {
    }
  Gnss_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , is_valid(false)
    , latitude(0.0)
    , longitude(0.0)
    , elevation(0.0)
    , utm_position(_alloc)
    , attitude(_alloc)
    , sd_position(_alloc)
    , sd_velocity(_alloc)
    , sd_attitude(_alloc)
    , second(0.0)
    , sat_use_num(0)
    , sat_in_view_num(0)
    , solution_status(0)
    , position_type(0)
    , linear_velocity(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _is_valid_type;
  _is_valid_type is_valid;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _elevation_type;
  _elevation_type elevation;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _utm_position_type;
  _utm_position_type utm_position;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _attitude_type;
  _attitude_type attitude;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _sd_position_type;
  _sd_position_type sd_position;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _sd_velocity_type;
  _sd_velocity_type sd_velocity;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _sd_attitude_type;
  _sd_attitude_type sd_attitude;

   typedef float _second_type;
  _second_type second;

   typedef int32_t _sat_use_num_type;
  _sat_use_num_type sat_use_num;

   typedef int32_t _sat_in_view_num_type;
  _sat_in_view_num_type sat_in_view_num;

   typedef uint16_t _solution_status_type;
  _solution_status_type solution_status;

   typedef uint16_t _position_type_type;
  _position_type_type position_type;

   typedef  ::ros_interface::Point3D_<ContainerAllocator>  _linear_velocity_type;
  _linear_velocity_type linear_velocity;





  typedef boost::shared_ptr< ::ros_interface::Gnss_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Gnss_<ContainerAllocator> const> ConstPtr;

}; // struct Gnss_

typedef ::ros_interface::Gnss_<std::allocator<void> > Gnss;

typedef boost::shared_ptr< ::ros_interface::Gnss > GnssPtr;
typedef boost::shared_ptr< ::ros_interface::Gnss const> GnssConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Gnss_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Gnss_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Gnss_<ContainerAllocator1> & lhs, const ::ros_interface::Gnss_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.is_valid == rhs.is_valid &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.elevation == rhs.elevation &&
    lhs.utm_position == rhs.utm_position &&
    lhs.attitude == rhs.attitude &&
    lhs.sd_position == rhs.sd_position &&
    lhs.sd_velocity == rhs.sd_velocity &&
    lhs.sd_attitude == rhs.sd_attitude &&
    lhs.second == rhs.second &&
    lhs.sat_use_num == rhs.sat_use_num &&
    lhs.sat_in_view_num == rhs.sat_in_view_num &&
    lhs.solution_status == rhs.solution_status &&
    lhs.position_type == rhs.position_type &&
    lhs.linear_velocity == rhs.linear_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Gnss_<ContainerAllocator1> & lhs, const ::ros_interface::Gnss_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Gnss_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Gnss_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Gnss_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Gnss_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Gnss_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Gnss_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Gnss_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24b33ab56e90d13bfcf615123e61b968";
  }

  static const char* value(const ::ros_interface::Gnss_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24b33ab56e90d13bULL;
  static const uint64_t static_value2 = 0xfcf615123e61b968ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Gnss_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Gnss";
  }

  static const char* value(const ::ros_interface::Gnss_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Gnss_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"bool   is_valid     # # 数据有效性标志位\n"
"float32   latitude     # # 纬度信息\n"
"float32   longitude     # # 经度信息\n"
"float32   elevation     # # 海拔信息\n"
"Point3D   utm_position     # # UTM坐标位置\n"
"Point3D   attitude     # # 三轴姿态\n"
"Point3D   sd_position     # # 位置标准差\n"
"Point3D   sd_velocity     # # 速度标准差\n"
"Point3D   sd_attitude     # # 姿态标准差\n"
"float32   second     # # 时间\n"
"int32   sat_use_num     # # 使用卫星数\n"
"int32   sat_in_view_num     # # 可见卫星数\n"
"uint16   solution_status     # # 求解状态\n"
"uint16   position_type     # # 定位状态\n"
"Point3D   linear_velocity     # # 线速度信息\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float32   x     #  \n"
"float32   y     #  \n"
"float32   z     #  \n"
;
  }

  static const char* value(const ::ros_interface::Gnss_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Gnss_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.is_valid);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.elevation);
      stream.next(m.utm_position);
      stream.next(m.attitude);
      stream.next(m.sd_position);
      stream.next(m.sd_velocity);
      stream.next(m.sd_attitude);
      stream.next(m.second);
      stream.next(m.sat_use_num);
      stream.next(m.sat_in_view_num);
      stream.next(m.solution_status);
      stream.next(m.position_type);
      stream.next(m.linear_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gnss_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Gnss_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Gnss_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_valid);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "elevation: ";
    Printer<float>::stream(s, indent + "  ", v.elevation);
    s << indent << "utm_position: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.utm_position);
    s << indent << "attitude: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude);
    s << indent << "sd_position: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.sd_position);
    s << indent << "sd_velocity: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.sd_velocity);
    s << indent << "sd_attitude: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.sd_attitude);
    s << indent << "second: ";
    Printer<float>::stream(s, indent + "  ", v.second);
    s << indent << "sat_use_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sat_use_num);
    s << indent << "sat_in_view_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sat_in_view_num);
    s << indent << "solution_status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.solution_status);
    s << indent << "position_type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.position_type);
    s << indent << "linear_velocity: ";
    s << std::endl;
    Printer< ::ros_interface::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_GNSS_H
