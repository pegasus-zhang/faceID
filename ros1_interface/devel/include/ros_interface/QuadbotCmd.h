// Generated by gencpp from file ros_interface/QuadbotCmd.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_QUADBOTCMD_H
#define ROS_INTERFACE_MESSAGE_QUADBOTCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/Twist.h>
#include <ros_interface/ComplexCommand.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct QuadbotCmd_
{
  typedef QuadbotCmd_<ContainerAllocator> Type;

  QuadbotCmd_()
    : header()
    , action_id(0)
    , quadbot_kind(0)
    , action_name()
    , twist()
    , complex_cmd()  {
    }
  QuadbotCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , action_id(0)
    , quadbot_kind(0)
    , action_name(_alloc)
    , twist(_alloc)
    , complex_cmd(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _action_id_type;
  _action_id_type action_id;

   typedef int32_t _quadbot_kind_type;
  _quadbot_kind_type quadbot_kind;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_name_type;
  _action_name_type action_name;

   typedef  ::ros_interface::Twist_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef  ::ros_interface::ComplexCommand_<ContainerAllocator>  _complex_cmd_type;
  _complex_cmd_type complex_cmd;





  typedef boost::shared_ptr< ::ros_interface::QuadbotCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::QuadbotCmd_<ContainerAllocator> const> ConstPtr;

}; // struct QuadbotCmd_

typedef ::ros_interface::QuadbotCmd_<std::allocator<void> > QuadbotCmd;

typedef boost::shared_ptr< ::ros_interface::QuadbotCmd > QuadbotCmdPtr;
typedef boost::shared_ptr< ::ros_interface::QuadbotCmd const> QuadbotCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::QuadbotCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::QuadbotCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::QuadbotCmd_<ContainerAllocator1> & lhs, const ::ros_interface::QuadbotCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.action_id == rhs.action_id &&
    lhs.quadbot_kind == rhs.quadbot_kind &&
    lhs.action_name == rhs.action_name &&
    lhs.twist == rhs.twist &&
    lhs.complex_cmd == rhs.complex_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::QuadbotCmd_<ContainerAllocator1> & lhs, const ::ros_interface::QuadbotCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::QuadbotCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::QuadbotCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::QuadbotCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::QuadbotCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::QuadbotCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::QuadbotCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::QuadbotCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b913b00e78766226918c3d24c7939f9a";
  }

  static const char* value(const ::ros_interface::QuadbotCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb913b00e78766226ULL;
  static const uint64_t static_value2 = 0x918c3d24c7939f9aULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::QuadbotCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/QuadbotCmd";
  }

  static const char* value(const ::ros_interface::QuadbotCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::QuadbotCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"uint64   action_id     # #动作执行id\n"
"int32   quadbot_kind     # #简单指令（坐下...）；复杂指令（走直线/走圆弧）\n"
"string   action_name     # #简单指令，坐下，站起来（坐下，站起来指令直接运控执行），包含步态切换，规划只需要发送这个就行了\n"
"Twist   twist     #  \n"
"ComplexCommand   complex_cmd     # #规划端不使用这个指令\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Twist\n"
"Vector3   linear     # 线速度（x方向 y方向 z方向）\n"
"Vector3   angular     # 角速度（x方向 y方向 z方向）\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Vector3\n"
"float32   x     #  \n"
"float32   y     #  \n"
"float32   z     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/ComplexCommand\n"
"uint8   type_id     #  \n"
"uint8   unit_id     #  \n"
"float32   data_a     #  \n"
"float32   data_b     #  \n"
;
  }

  static const char* value(const ::ros_interface::QuadbotCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::QuadbotCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.action_id);
      stream.next(m.quadbot_kind);
      stream.next(m.action_name);
      stream.next(m.twist);
      stream.next(m.complex_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QuadbotCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::QuadbotCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::QuadbotCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "action_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.action_id);
    s << indent << "quadbot_kind: ";
    Printer<int32_t>::stream(s, indent + "  ", v.quadbot_kind);
    s << indent << "action_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action_name);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::ros_interface::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "complex_cmd: ";
    s << std::endl;
    Printer< ::ros_interface::ComplexCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.complex_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_QUADBOTCMD_H
