// Generated by gencpp from file ros_interface/Quaternion.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_QUATERNION_H
#define ROS_INTERFACE_MESSAGE_QUATERNION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct Quaternion_
{
  typedef Quaternion_<ContainerAllocator> Type;

  Quaternion_()
    : qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , qw(0.0)  {
    }
  Quaternion_(const ContainerAllocator& _alloc)
    : qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , qw(0.0)  {
  (void)_alloc;
    }



   typedef float _qx_type;
  _qx_type qx;

   typedef float _qy_type;
  _qy_type qy;

   typedef float _qz_type;
  _qz_type qz;

   typedef float _qw_type;
  _qw_type qw;





  typedef boost::shared_ptr< ::ros_interface::Quaternion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::Quaternion_<ContainerAllocator> const> ConstPtr;

}; // struct Quaternion_

typedef ::ros_interface::Quaternion_<std::allocator<void> > Quaternion;

typedef boost::shared_ptr< ::ros_interface::Quaternion > QuaternionPtr;
typedef boost::shared_ptr< ::ros_interface::Quaternion const> QuaternionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::Quaternion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::Quaternion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::Quaternion_<ContainerAllocator1> & lhs, const ::ros_interface::Quaternion_<ContainerAllocator2> & rhs)
{
  return lhs.qx == rhs.qx &&
    lhs.qy == rhs.qy &&
    lhs.qz == rhs.qz &&
    lhs.qw == rhs.qw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::Quaternion_<ContainerAllocator1> & lhs, const ::ros_interface::Quaternion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Quaternion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::Quaternion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Quaternion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::Quaternion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Quaternion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::Quaternion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::Quaternion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da959fb3fb7383ea37fa4a34b97f97ff";
  }

  static const char* value(const ::ros_interface::Quaternion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda959fb3fb7383eaULL;
  static const uint64_t static_value2 = 0x37fa4a34b97f97ffULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::Quaternion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/Quaternion";
  }

  static const char* value(const ::ros_interface::Quaternion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::Quaternion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32   qx     #  \n"
"float32   qy     #  \n"
"float32   qz     #  \n"
"float32   qw     #  \n"
;
  }

  static const char* value(const ::ros_interface::Quaternion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::Quaternion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.qx);
      stream.next(m.qy);
      stream.next(m.qz);
      stream.next(m.qw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Quaternion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::Quaternion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::Quaternion_<ContainerAllocator>& v)
  {
    s << indent << "qx: ";
    Printer<float>::stream(s, indent + "  ", v.qx);
    s << indent << "qy: ";
    Printer<float>::stream(s, indent + "  ", v.qy);
    s << indent << "qz: ";
    Printer<float>::stream(s, indent + "  ", v.qz);
    s << indent << "qw: ";
    Printer<float>::stream(s, indent + "  ", v.qw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_QUATERNION_H
