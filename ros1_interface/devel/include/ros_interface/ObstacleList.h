// Generated by gencpp from file ros_interface/ObstacleList.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_OBSTACLELIST_H
#define ROS_INTERFACE_MESSAGE_OBSTACLELIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ros_interface/Obstacle.h>
#include <ros_interface/FreeSpace.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct ObstacleList_
{
  typedef ObstacleList_<ContainerAllocator> Type;

  ObstacleList_()
    : header()
    , obstaclelist()
    , free_space()  {
    }
  ObstacleList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , obstaclelist(_alloc)
    , free_space(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ros_interface::Obstacle_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_interface::Obstacle_<ContainerAllocator> >> _obstaclelist_type;
  _obstaclelist_type obstaclelist;

   typedef  ::ros_interface::FreeSpace_<ContainerAllocator>  _free_space_type;
  _free_space_type free_space;





  typedef boost::shared_ptr< ::ros_interface::ObstacleList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::ObstacleList_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleList_

typedef ::ros_interface::ObstacleList_<std::allocator<void> > ObstacleList;

typedef boost::shared_ptr< ::ros_interface::ObstacleList > ObstacleListPtr;
typedef boost::shared_ptr< ::ros_interface::ObstacleList const> ObstacleListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::ObstacleList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::ObstacleList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::ObstacleList_<ContainerAllocator1> & lhs, const ::ros_interface::ObstacleList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.obstaclelist == rhs.obstaclelist &&
    lhs.free_space == rhs.free_space;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::ObstacleList_<ContainerAllocator1> & lhs, const ::ros_interface::ObstacleList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ObstacleList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::ObstacleList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ObstacleList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::ObstacleList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ObstacleList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::ObstacleList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::ObstacleList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05b2fafa6d44e7a83845863b5ebb615f";
  }

  static const char* value(const ::ros_interface::ObstacleList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05b2fafa6d44e7a8ULL;
  static const uint64_t static_value2 = 0x3845863b5ebb615fULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::ObstacleList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/ObstacleList";
  }

  static const char* value(const ::ros_interface::ObstacleList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::ObstacleList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"Obstacle[] obstaclelist # #感知识别出的所有物体信息\n"
"FreeSpace   free_space     # #可行使区域\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Obstacle\n"
"Header   header     #  \n"
"uint8   id     # #物体ID\n"
"int32   type     # #物体类型，TYPE=0//未知物体，TYPE=1//门，TYPE=2//窗户，TYPE=3//冰箱，TYPE=4//电视，TYPE=5//风扇，TYPE=6//衣柜，TYPE=7//床，TYPE=8//沙发，TYPE=9//桌子，TYPE=10//椅子，TYPE=11//楼梯，TYPE=12//台阶，TYPE=13//斜坡，TYPE=14//坑洼，TYPE=15//人\n"
"float32   confidence     # #置信度\n"
"Point3D   center_point_abs     # #在世界坐标系下的物体中心位置\n"
"float32   theta     # #在世界坐标系下物体的朝向\n"
"Point3D   velocity     # #在世界坐标系下的物体的速度\n"
"float32   length     # #物体外接立体的长度\n"
"float32   width     # #物体外接立体的宽度\n"
"float32   height     # #物体外接立体的高度\n"
"OccGrid[] occupy_grid # # 世界坐标系下物体占据的网格\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/Point3D\n"
"float32   x     #  \n"
"float32   y     #  \n"
"float32   z     #  \n"
"\n"
"================================================================================\n"
"MSG: ros_interface/OccGrid\n"
"int32   type     # //网格类型，TYPE=0//未知，TYPE=1//可行驶，TYPE=2//不可行驶\n"
"int32   index_x     # //网格横向编号\n"
"int32   index_y     # //网格纵向编号\n"
"int32   index_z     # //网格垂直方向编号\n"
"float32   grid_size_x     # //网格横向大小，单位：米\n"
"float32   grid_size_y     # //网格纵向大小，单位：米\n"
"float32   grid_size_z     # //网格垂直方向大小，单位：米\n"
"\n"
"================================================================================\n"
"MSG: ros_interface/FreeSpace\n"
"Header   header     # //网格类型，TYPE=0//未知，TYPE=1//可行驶，TYPE=2//不可行驶\n"
"OccGrid[] freegrids # //网格横向编号\n"
"#Polygon3D[] freegrids\n"
"Point3D[] freespace_region # //网格大小，单位：米\n"
;
  }

  static const char* value(const ::ros_interface::ObstacleList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::ObstacleList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.obstaclelist);
      stream.next(m.free_space);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::ObstacleList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::ObstacleList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "obstaclelist[]" << std::endl;
    for (size_t i = 0; i < v.obstaclelist.size(); ++i)
    {
      s << indent << "  obstaclelist[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_interface::Obstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.obstaclelist[i]);
    }
    s << indent << "free_space: ";
    s << std::endl;
    Printer< ::ros_interface::FreeSpace_<ContainerAllocator> >::stream(s, indent + "  ", v.free_space);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_OBSTACLELIST_H
