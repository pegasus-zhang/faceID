// Generated by gencpp from file ros_interface/OccGrid.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_OCCGRID_H
#define ROS_INTERFACE_MESSAGE_OCCGRID_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_interface
{
template <class ContainerAllocator>
struct OccGrid_
{
  typedef OccGrid_<ContainerAllocator> Type;

  OccGrid_()
    : type(0)
    , index_x(0)
    , index_y(0)
    , index_z(0)
    , grid_size_x(0.0)
    , grid_size_y(0.0)
    , grid_size_z(0.0)  {
    }
  OccGrid_(const ContainerAllocator& _alloc)
    : type(0)
    , index_x(0)
    , index_y(0)
    , index_z(0)
    , grid_size_x(0.0)
    , grid_size_y(0.0)
    , grid_size_z(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _index_x_type;
  _index_x_type index_x;

   typedef int32_t _index_y_type;
  _index_y_type index_y;

   typedef int32_t _index_z_type;
  _index_z_type index_z;

   typedef float _grid_size_x_type;
  _grid_size_x_type grid_size_x;

   typedef float _grid_size_y_type;
  _grid_size_y_type grid_size_y;

   typedef float _grid_size_z_type;
  _grid_size_z_type grid_size_z;





  typedef boost::shared_ptr< ::ros_interface::OccGrid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::OccGrid_<ContainerAllocator> const> ConstPtr;

}; // struct OccGrid_

typedef ::ros_interface::OccGrid_<std::allocator<void> > OccGrid;

typedef boost::shared_ptr< ::ros_interface::OccGrid > OccGridPtr;
typedef boost::shared_ptr< ::ros_interface::OccGrid const> OccGridConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::OccGrid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::OccGrid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::OccGrid_<ContainerAllocator1> & lhs, const ::ros_interface::OccGrid_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.index_x == rhs.index_x &&
    lhs.index_y == rhs.index_y &&
    lhs.index_z == rhs.index_z &&
    lhs.grid_size_x == rhs.grid_size_x &&
    lhs.grid_size_y == rhs.grid_size_y &&
    lhs.grid_size_z == rhs.grid_size_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::OccGrid_<ContainerAllocator1> & lhs, const ::ros_interface::OccGrid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::OccGrid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::OccGrid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::OccGrid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::OccGrid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::OccGrid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::OccGrid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::OccGrid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44aafbeacd0b2f46dbacbb6fc274af9e";
  }

  static const char* value(const ::ros_interface::OccGrid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44aafbeacd0b2f46ULL;
  static const uint64_t static_value2 = 0xdbacbb6fc274af9eULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::OccGrid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/OccGrid";
  }

  static const char* value(const ::ros_interface::OccGrid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::OccGrid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   type     # //网格类型，TYPE=0//未知，TYPE=1//可行驶，TYPE=2//不可行驶\n"
"int32   index_x     # //网格横向编号\n"
"int32   index_y     # //网格纵向编号\n"
"int32   index_z     # //网格垂直方向编号\n"
"float32   grid_size_x     # //网格横向大小，单位：米\n"
"float32   grid_size_y     # //网格纵向大小，单位：米\n"
"float32   grid_size_z     # //网格垂直方向大小，单位：米\n"
;
  }

  static const char* value(const ::ros_interface::OccGrid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::OccGrid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.index_x);
      stream.next(m.index_y);
      stream.next(m.index_z);
      stream.next(m.grid_size_x);
      stream.next(m.grid_size_y);
      stream.next(m.grid_size_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OccGrid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::OccGrid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::OccGrid_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "index_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index_x);
    s << indent << "index_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index_y);
    s << indent << "index_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index_z);
    s << indent << "grid_size_x: ";
    Printer<float>::stream(s, indent + "  ", v.grid_size_x);
    s << indent << "grid_size_y: ";
    Printer<float>::stream(s, indent + "  ", v.grid_size_y);
    s << indent << "grid_size_z: ";
    Printer<float>::stream(s, indent + "  ", v.grid_size_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_OCCGRID_H
