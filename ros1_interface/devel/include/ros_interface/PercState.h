// Generated by gencpp from file ros_interface/PercState.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_PERCSTATE_H
#define ROS_INTERFACE_MESSAGE_PERCSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct PercState_
{
  typedef PercState_<ContainerAllocator> Type;

  PercState_()
    : header()
    , action_id(0)
    , perc_kind(0)
    , exe_state(0)
    , exe_result(0)
    , err_code(0)
    , err_info()
    , wait_for_millisec(0)  {
    }
  PercState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , action_id(0)
    , perc_kind(0)
    , exe_state(0)
    , exe_result(0)
    , err_code(0)
    , err_info(_alloc)
    , wait_for_millisec(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _action_id_type;
  _action_id_type action_id;

   typedef int32_t _perc_kind_type;
  _perc_kind_type perc_kind;

   typedef int32_t _exe_state_type;
  _exe_state_type exe_state;

   typedef int32_t _exe_result_type;
  _exe_result_type exe_result;

   typedef int32_t _err_code_type;
  _err_code_type err_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _err_info_type;
  _err_info_type err_info;

   typedef uint64_t _wait_for_millisec_type;
  _wait_for_millisec_type wait_for_millisec;





  typedef boost::shared_ptr< ::ros_interface::PercState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::PercState_<ContainerAllocator> const> ConstPtr;

}; // struct PercState_

typedef ::ros_interface::PercState_<std::allocator<void> > PercState;

typedef boost::shared_ptr< ::ros_interface::PercState > PercStatePtr;
typedef boost::shared_ptr< ::ros_interface::PercState const> PercStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::PercState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::PercState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::PercState_<ContainerAllocator1> & lhs, const ::ros_interface::PercState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.action_id == rhs.action_id &&
    lhs.perc_kind == rhs.perc_kind &&
    lhs.exe_state == rhs.exe_state &&
    lhs.exe_result == rhs.exe_result &&
    lhs.err_code == rhs.err_code &&
    lhs.err_info == rhs.err_info &&
    lhs.wait_for_millisec == rhs.wait_for_millisec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::PercState_<ContainerAllocator1> & lhs, const ::ros_interface::PercState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PercState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::PercState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PercState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::PercState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PercState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::PercState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::PercState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "765a04de9c3e032f8c6862b330bcbf80";
  }

  static const char* value(const ::ros_interface::PercState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x765a04de9c3e032fULL;
  static const uint64_t static_value2 = 0x8c6862b330bcbf80ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::PercState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/PercState";
  }

  static const char* value(const ::ros_interface::PercState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::PercState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"uint64   action_id     # # 当前执行的id\n"
"int32   perc_kind     # # Perception Kind 枚举类型 uint32 PERC_DEST   = 1   #点到点 uint32 PERC_ABS    = 2   #绝对位置 uint32 PERC_REL    = 3    #相对位置 uint32 PERC_AUTO_CHARGING   = 20  # 自动充电 uint32 PERC_CHECK_ENV       = 21  # 环境查看 uint32 PERC_AUTO_MAPPING    = 22  # 自动建图 uint32 PERC_FOLLOW               = 30  # 跟随模式 uint32 PERC_STRANGER_WELCOME     = 31  # 陌生人迎接 uint32 PERC_OWNER_WELCOME        = 32  # 主人迎接 uint32 PERC_BEHAVIOR_INTERACTION = 33  # 行为互动 uint32 PERC_HANDSHAKE            = 34   # 握手动作 uint32 PERC_STANDBY_ACCOMPANY    = 35  # 待机陪伴 uint32 PERC_HAPPY_ACCOMPANY      = 36  # 娱乐陪伴 uint32 PERC_WORK_ACCOMPANY       = 37  # 工作陪伴 uint32 PERC_POSITIVE_ACCOMPANY   = 38  # 积极陪伴 uint32 PERC_NEGATIVE_ACCOMPANY   = 39  # 消极陪伴 uint32 PERC_CHILD_WATCH          = 40  # 小孩看护 uint32 PERC_OLDER_WATCH          = 41  # 老人看护 uint32 PERC_DANGER_REMINDER      = 42   # 危险提醒 uint32 PERC_EVENT_REMINDER       = 43  # 事件提醒 uint32 PERC_CATWALK_START        = 44  # 开始走秀 uint32 PERC_CATWALK_ACT          = 45  # 走秀互动 uint32 PERC_CATWALK_SHOW         = 46  # 走秀展示 uint32 PERC_CATWALK_BACK         = 47  # 走秀返回 uint32 PERC_FREE_TIME   = 50  # 自由活动 uint32 PERC_SOCIALIZE   = 51  # 社交模式 uint32 PERC_DANGER_INFO = 60  # 上报危险信息（不需要请求） uint32 PERC_CANCEL      = 100  # 任务取消（不需要请求） uint32 PERC_NODE_CLOSE = 200  #关闭指令 uint32 PERC_NODE_START = 201  #启动指令 uint32 PERC_NODE_RESET = 202  #重启指令\n"
"int32   exe_state     # # 执行状态：空闲/正在执行/执行完成\n"
"int32   exe_result     # # 执行结果：无效/成功/失败\n"
"int32   err_code     # # 错误码\n"
"string   err_info     # # 错误消息\n"
"uint64   wait_for_millisec     # # 剩余执行时间\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ros_interface::PercState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::PercState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.action_id);
      stream.next(m.perc_kind);
      stream.next(m.exe_state);
      stream.next(m.exe_result);
      stream.next(m.err_code);
      stream.next(m.err_info);
      stream.next(m.wait_for_millisec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PercState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::PercState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::PercState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "action_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.action_id);
    s << indent << "perc_kind: ";
    Printer<int32_t>::stream(s, indent + "  ", v.perc_kind);
    s << indent << "exe_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.exe_state);
    s << indent << "exe_result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.exe_result);
    s << indent << "err_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.err_code);
    s << indent << "err_info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.err_info);
    s << indent << "wait_for_millisec: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.wait_for_millisec);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_PERCSTATE_H
