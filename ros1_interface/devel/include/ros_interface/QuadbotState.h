// Generated by gencpp from file ros_interface/QuadbotState.msg
// DO NOT EDIT!


#ifndef ROS_INTERFACE_MESSAGE_QUADBOTSTATE_H
#define ROS_INTERFACE_MESSAGE_QUADBOTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_interface
{
template <class ContainerAllocator>
struct QuadbotState_
{
  typedef QuadbotState_<ContainerAllocator> Type;

  QuadbotState_()
    : header()
    , action_id(0)
    , action_name()
    , action_state(0)
    , action_result(0)
    , exe_name()
    , exe_state(0)
    , exe_result(0)
    , err_code(0)
    , err_info()
    , wait_for_millisec(0)  {
    }
  QuadbotState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , action_id(0)
    , action_name(_alloc)
    , action_state(0)
    , action_result(0)
    , exe_name(_alloc)
    , exe_state(0)
    , exe_result(0)
    , err_code(0)
    , err_info(_alloc)
    , wait_for_millisec(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _action_id_type;
  _action_id_type action_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_name_type;
  _action_name_type action_name;

   typedef int32_t _action_state_type;
  _action_state_type action_state;

   typedef int32_t _action_result_type;
  _action_result_type action_result;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _exe_name_type;
  _exe_name_type exe_name;

   typedef int32_t _exe_state_type;
  _exe_state_type exe_state;

   typedef int32_t _exe_result_type;
  _exe_result_type exe_result;

   typedef int32_t _err_code_type;
  _err_code_type err_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _err_info_type;
  _err_info_type err_info;

   typedef uint64_t _wait_for_millisec_type;
  _wait_for_millisec_type wait_for_millisec;





  typedef boost::shared_ptr< ::ros_interface::QuadbotState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_interface::QuadbotState_<ContainerAllocator> const> ConstPtr;

}; // struct QuadbotState_

typedef ::ros_interface::QuadbotState_<std::allocator<void> > QuadbotState;

typedef boost::shared_ptr< ::ros_interface::QuadbotState > QuadbotStatePtr;
typedef boost::shared_ptr< ::ros_interface::QuadbotState const> QuadbotStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_interface::QuadbotState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_interface::QuadbotState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_interface::QuadbotState_<ContainerAllocator1> & lhs, const ::ros_interface::QuadbotState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.action_id == rhs.action_id &&
    lhs.action_name == rhs.action_name &&
    lhs.action_state == rhs.action_state &&
    lhs.action_result == rhs.action_result &&
    lhs.exe_name == rhs.exe_name &&
    lhs.exe_state == rhs.exe_state &&
    lhs.exe_result == rhs.exe_result &&
    lhs.err_code == rhs.err_code &&
    lhs.err_info == rhs.err_info &&
    lhs.wait_for_millisec == rhs.wait_for_millisec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_interface::QuadbotState_<ContainerAllocator1> & lhs, const ::ros_interface::QuadbotState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_interface::QuadbotState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_interface::QuadbotState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::QuadbotState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_interface::QuadbotState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::QuadbotState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_interface::QuadbotState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_interface::QuadbotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62874a497f75be8fb0d09338630a9af5";
  }

  static const char* value(const ::ros_interface::QuadbotState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62874a497f75be8fULL;
  static const uint64_t static_value2 = 0xb0d09338630a9af5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_interface::QuadbotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_interface/QuadbotState";
  }

  static const char* value(const ::ros_interface::QuadbotState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_interface::QuadbotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header   header     #  \n"
"uint64   action_id     # #动作执行id\n"
"string   action_name     #  \n"
"int32   action_state     #  \n"
"int32   action_result     #  \n"
"string   exe_name     #  \n"
"int32   exe_state     #  \n"
"int32   exe_result     #  \n"
"int32   err_code     #  \n"
"string   err_info     #  \n"
"uint64   wait_for_millisec     #  \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ros_interface::QuadbotState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_interface::QuadbotState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.action_id);
      stream.next(m.action_name);
      stream.next(m.action_state);
      stream.next(m.action_result);
      stream.next(m.exe_name);
      stream.next(m.exe_state);
      stream.next(m.exe_result);
      stream.next(m.err_code);
      stream.next(m.err_info);
      stream.next(m.wait_for_millisec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QuadbotState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_interface::QuadbotState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_interface::QuadbotState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "action_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.action_id);
    s << indent << "action_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action_name);
    s << indent << "action_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_state);
    s << indent << "action_result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_result);
    s << indent << "exe_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.exe_name);
    s << indent << "exe_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.exe_state);
    s << indent << "exe_result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.exe_result);
    s << indent << "err_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.err_code);
    s << indent << "err_info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.err_info);
    s << indent << "wait_for_millisec: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.wait_for_millisec);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_INTERFACE_MESSAGE_QUADBOTSTATE_H
