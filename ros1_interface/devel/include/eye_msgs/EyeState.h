// Generated by gencpp from file eye_msgs/EyeState.msg
// DO NOT EDIT!


#ifndef EYE_MSGS_MESSAGE_EYESTATE_H
#define EYE_MSGS_MESSAGE_EYESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace eye_msgs
{
template <class ContainerAllocator>
struct EyeState_
{
  typedef EyeState_<ContainerAllocator> Type;

  EyeState_()
    : header()
    , action_id(0)
    , eye_kind(0)
    , exe_state(0)
    , exe_result(0)
    , err_code(0)
    , err_info()
    , wait_for_millisec(0)  {
    }
  EyeState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , action_id(0)
    , eye_kind(0)
    , exe_state(0)
    , exe_result(0)
    , err_code(0)
    , err_info(_alloc)
    , wait_for_millisec(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _action_id_type;
  _action_id_type action_id;

   typedef uint32_t _eye_kind_type;
  _eye_kind_type eye_kind;

   typedef uint8_t _exe_state_type;
  _exe_state_type exe_state;

   typedef uint8_t _exe_result_type;
  _exe_result_type exe_result;

   typedef uint16_t _err_code_type;
  _err_code_type err_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _err_info_type;
  _err_info_type err_info;

   typedef uint64_t _wait_for_millisec_type;
  _wait_for_millisec_type wait_for_millisec;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ACTION_IDLE)
  #undef ACTION_IDLE
#endif
#if defined(_WIN32) && defined(ACTION_RUNNING)
  #undef ACTION_RUNNING
#endif
#if defined(_WIN32) && defined(ACTION_DONE)
  #undef ACTION_DONE
#endif
#if defined(_WIN32) && defined(ACTION_NONE)
  #undef ACTION_NONE
#endif
#if defined(_WIN32) && defined(ACTION_SUCCESS)
  #undef ACTION_SUCCESS
#endif
#if defined(_WIN32) && defined(ACTION_FAIL)
  #undef ACTION_FAIL
#endif
#if defined(_WIN32) && defined(ACTION_ERR_NONE)
  #undef ACTION_ERR_NONE
#endif
#if defined(_WIN32) && defined(ACTION_ERR_NOWORK)
  #undef ACTION_ERR_NOWORK
#endif
#if defined(_WIN32) && defined(EYE_FACE_RECORD)
  #undef EYE_FACE_RECORD
#endif
#if defined(_WIN32) && defined(EYE_BODY_RECORD)
  #undef EYE_BODY_RECORD
#endif
#if defined(_WIN32) && defined(EYE_WELCOME_DEMO)
  #undef EYE_WELCOME_DEMO
#endif
#if defined(_WIN32) && defined(EYE_LOBBY_DEMO)
  #undef EYE_LOBBY_DEMO
#endif
#if defined(_WIN32) && defined(EYE_CANCEL)
  #undef EYE_CANCEL
#endif

  enum {
    ACTION_IDLE = 0u,
    ACTION_RUNNING = 1u,
    ACTION_DONE = 2u,
    ACTION_NONE = 0u,
    ACTION_SUCCESS = 1u,
    ACTION_FAIL = 2u,
    ACTION_ERR_NONE = 0u,
    ACTION_ERR_NOWORK = 1u,
    EYE_FACE_RECORD = 5u,
    EYE_BODY_RECORD = 6u,
    EYE_WELCOME_DEMO = 61u,
    EYE_LOBBY_DEMO = 62u,
    EYE_CANCEL = 100u,
  };


  typedef boost::shared_ptr< ::eye_msgs::EyeState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eye_msgs::EyeState_<ContainerAllocator> const> ConstPtr;

}; // struct EyeState_

typedef ::eye_msgs::EyeState_<std::allocator<void> > EyeState;

typedef boost::shared_ptr< ::eye_msgs::EyeState > EyeStatePtr;
typedef boost::shared_ptr< ::eye_msgs::EyeState const> EyeStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eye_msgs::EyeState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eye_msgs::EyeState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::eye_msgs::EyeState_<ContainerAllocator1> & lhs, const ::eye_msgs::EyeState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.action_id == rhs.action_id &&
    lhs.eye_kind == rhs.eye_kind &&
    lhs.exe_state == rhs.exe_state &&
    lhs.exe_result == rhs.exe_result &&
    lhs.err_code == rhs.err_code &&
    lhs.err_info == rhs.err_info &&
    lhs.wait_for_millisec == rhs.wait_for_millisec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::eye_msgs::EyeState_<ContainerAllocator1> & lhs, const ::eye_msgs::EyeState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace eye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::eye_msgs::EyeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eye_msgs::EyeState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eye_msgs::EyeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eye_msgs::EyeState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eye_msgs::EyeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eye_msgs::EyeState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eye_msgs::EyeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41f7fe8eaece5c7faa443d0f00d98c30";
  }

  static const char* value(const ::eye_msgs::EyeState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41f7fe8eaece5c7fULL;
  static const uint64_t static_value2 = 0xaa443d0f00d98c30ULL;
};

template<class ContainerAllocator>
struct DataType< ::eye_msgs::EyeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eye_msgs/EyeState";
  }

  static const char* value(const ::eye_msgs::EyeState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eye_msgs::EyeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# ActionState\n"
"uint8 ACTION_IDLE = 0\n"
"uint8 ACTION_RUNNING = 1\n"
"uint8 ACTION_DONE = 2\n"
"\n"
"# ActionResult\n"
"uint8 ACTION_NONE = 0\n"
"uint8 ACTION_SUCCESS = 1\n"
"uint8 ACTION_FAIL = 2\n"
"\n"
"# ErrCode\n"
"uint16 ACTION_ERR_NONE = 0\n"
"uint16 ACTION_ERR_NOWORK = 1\n"
"\n"
"# 当前执行的id\n"
"uint64 action_id\n"
"\n"
"# 人脸录入\n"
"uint32 EYE_FACE_RECORD          = 5\n"
"uint32 EYE_BODY_RECORD          = 6 \n"
"# 欢迎模式\n"
"uint32 EYE_WELCOME_DEMO         = 61\n"
"# 回大厅找人\n"
"uint32 EYE_LOBBY_DEMO           = 62\n"
"\n"
"# 任务取消（不需要请求）\n"
"uint32 EYE_CANCEL               = 100\n"
"\n"
"# 类型\n"
"uint32 eye_kind\n"
"# 执行状态：空闲/正在执行/执行完成\n"
"uint8 exe_state\n"
"# 执行结果：无效/成功/失败\n"
"uint8 exe_result\n"
"\n"
"# 错误码\n"
"uint16 err_code\n"
"# 错误消息\n"
"string err_info\n"
"# 剩余执行时间\n"
"uint64 wait_for_millisec\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::eye_msgs::EyeState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eye_msgs::EyeState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.action_id);
      stream.next(m.eye_kind);
      stream.next(m.exe_state);
      stream.next(m.exe_result);
      stream.next(m.err_code);
      stream.next(m.err_info);
      stream.next(m.wait_for_millisec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EyeState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eye_msgs::EyeState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eye_msgs::EyeState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "action_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.action_id);
    s << indent << "eye_kind: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.eye_kind);
    s << indent << "exe_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exe_state);
    s << indent << "exe_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exe_result);
    s << indent << "err_code: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.err_code);
    s << indent << "err_info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.err_info);
    s << indent << "wait_for_millisec: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.wait_for_millisec);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EYE_MSGS_MESSAGE_EYESTATE_H
