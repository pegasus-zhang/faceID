# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_interface/Obstacle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_interface.msg
import std_msgs.msg

class Obstacle(genpy.Message):
  _md5sum = "8cdacb9dc63898edc5f02d22321631b6"
  _type = "ros_interface/Obstacle"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header     #  
uint8   id     # #物体ID
int32   type     # #物体类型，TYPE=0//未知物体，TYPE=1//门，TYPE=2//窗户，TYPE=3//冰箱，TYPE=4//电视，TYPE=5//风扇，TYPE=6//衣柜，TYPE=7//床，TYPE=8//沙发，TYPE=9//桌子，TYPE=10//椅子，TYPE=11//楼梯，TYPE=12//台阶，TYPE=13//斜坡，TYPE=14//坑洼，TYPE=15//人
float32   confidence     # #置信度
Point3D   center_point_abs     # #在世界坐标系下的物体中心位置
float32   theta     # #在世界坐标系下物体的朝向
Point3D   velocity     # #在世界坐标系下的物体的速度
float32   length     # #物体外接立体的长度
float32   width     # #物体外接立体的宽度
float32   height     # #物体外接立体的高度
OccGrid[] occupy_grid # # 世界坐标系下物体占据的网格

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ros_interface/Point3D
float32   x     #  
float32   y     #  
float32   z     #  

================================================================================
MSG: ros_interface/OccGrid
int32   type     # //网格类型，TYPE=0//未知，TYPE=1//可行驶，TYPE=2//不可行驶
int32   index_x     # //网格横向编号
int32   index_y     # //网格纵向编号
int32   index_z     # //网格垂直方向编号
float32   grid_size_x     # //网格横向大小，单位：米
float32   grid_size_y     # //网格纵向大小，单位：米
float32   grid_size_z     # //网格垂直方向大小，单位：米
"""
  __slots__ = ['header','id','type','confidence','center_point_abs','theta','velocity','length','width','height','occupy_grid']
  _slot_types = ['std_msgs/Header','uint8','int32','float32','ros_interface/Point3D','float32','ros_interface/Point3D','float32','float32','float32','ros_interface/OccGrid[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,type,confidence,center_point_abs,theta,velocity,length,width,height,occupy_grid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Obstacle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.type is None:
        self.type = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.center_point_abs is None:
        self.center_point_abs = ros_interface.msg.Point3D()
      if self.theta is None:
        self.theta = 0.
      if self.velocity is None:
        self.velocity = ros_interface.msg.Point3D()
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.occupy_grid is None:
        self.occupy_grid = []
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.type = 0
      self.confidence = 0.
      self.center_point_abs = ros_interface.msg.Point3D()
      self.theta = 0.
      self.velocity = ros_interface.msg.Point3D()
      self.length = 0.
      self.width = 0.
      self.height = 0.
      self.occupy_grid = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bi11f().pack(_x.id, _x.type, _x.confidence, _x.center_point_abs.x, _x.center_point_abs.y, _x.center_point_abs.z, _x.theta, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.length, _x.width, _x.height))
      length = len(self.occupy_grid)
      buff.write(_struct_I.pack(length))
      for val1 in self.occupy_grid:
        _x = val1
        buff.write(_get_struct_4i3f().pack(_x.type, _x.index_x, _x.index_y, _x.index_z, _x.grid_size_x, _x.grid_size_y, _x.grid_size_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.center_point_abs is None:
        self.center_point_abs = ros_interface.msg.Point3D()
      if self.velocity is None:
        self.velocity = ros_interface.msg.Point3D()
      if self.occupy_grid is None:
        self.occupy_grid = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.id, _x.type, _x.confidence, _x.center_point_abs.x, _x.center_point_abs.y, _x.center_point_abs.z, _x.theta, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.length, _x.width, _x.height,) = _get_struct_Bi11f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.occupy_grid = []
      for i in range(0, length):
        val1 = ros_interface.msg.OccGrid()
        _x = val1
        start = end
        end += 28
        (_x.type, _x.index_x, _x.index_y, _x.index_z, _x.grid_size_x, _x.grid_size_y, _x.grid_size_z,) = _get_struct_4i3f().unpack(str[start:end])
        self.occupy_grid.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bi11f().pack(_x.id, _x.type, _x.confidence, _x.center_point_abs.x, _x.center_point_abs.y, _x.center_point_abs.z, _x.theta, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.length, _x.width, _x.height))
      length = len(self.occupy_grid)
      buff.write(_struct_I.pack(length))
      for val1 in self.occupy_grid:
        _x = val1
        buff.write(_get_struct_4i3f().pack(_x.type, _x.index_x, _x.index_y, _x.index_z, _x.grid_size_x, _x.grid_size_y, _x.grid_size_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.center_point_abs is None:
        self.center_point_abs = ros_interface.msg.Point3D()
      if self.velocity is None:
        self.velocity = ros_interface.msg.Point3D()
      if self.occupy_grid is None:
        self.occupy_grid = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.id, _x.type, _x.confidence, _x.center_point_abs.x, _x.center_point_abs.y, _x.center_point_abs.z, _x.theta, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.length, _x.width, _x.height,) = _get_struct_Bi11f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.occupy_grid = []
      for i in range(0, length):
        val1 = ros_interface.msg.OccGrid()
        _x = val1
        start = end
        end += 28
        (_x.type, _x.index_x, _x.index_y, _x.index_z, _x.grid_size_x, _x.grid_size_y, _x.grid_size_z,) = _get_struct_4i3f().unpack(str[start:end])
        self.occupy_grid.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4i3f = None
def _get_struct_4i3f():
    global _struct_4i3f
    if _struct_4i3f is None:
        _struct_4i3f = struct.Struct("<4i3f")
    return _struct_4i3f
_struct_Bi11f = None
def _get_struct_Bi11f():
    global _struct_Bi11f
    if _struct_Bi11f is None:
        _struct_Bi11f = struct.Struct("<Bi11f")
    return _struct_Bi11f
